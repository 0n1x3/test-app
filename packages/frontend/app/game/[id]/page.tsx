'use client';

import { useEffect, useState, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { SafeArea } from '@/components/_layout/SafeArea';
import { PageHeader } from '@/components/_layout/PageHeader';
import { PageContainer } from '@/components/_layout/PageContainer';
import { MultiplayerDiceGame } from '@/features/games/dice/components/MultiplayerDiceGame';
import { ErrorBoundary } from '@/components/_shared/ErrorBoundary';
import { useUserStore } from '@/store/useUserStore';
import { toast } from 'react-hot-toast';
import { getTelegramData } from '@/utils/telegramWebApp';
import { BottomNav } from '@/components/_layout/BottomNav';
import './style.css';
import io from 'socket.io-client';

// –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
interface GameData {
  betAmount: number;
  status?: 'waiting' | 'playing' | 'finished';
  players?: any[];
}

export default function GamePage() {
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ —Ö—É–∫ App Router
  const params = useParams();
  const gameId = params.id as string;
  
  const router = useRouter();
  const [gameData, setGameData] = useState<GameData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [joinStatus, setJoinStatus] = useState<'pending' | 'joined' | 'failed' | null>(null);
  
  const updateUserBalance = useUserStore(state => state.updateBalance);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram WebApp
  const getTelegramUserData = () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —É—Ç–∏–ª–∏—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      return getTelegramData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram:', error);
      throw new Error(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  const fetchGameData = async (id: string) => {
    try {
      console.log('–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', id);
      setLoading(true);
      
      const response = await fetch(`https://test.timecommunity.xyz/api/games/${id}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', response.status, response.statusText);
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if (response.status === 404) {
          setError('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return null;
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:', data);
      
      if (data.success && data.game) {
        return data.game;
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã');
        return null;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã:', error);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      return null;
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  const joinGame = async (id: string) => {
    try {
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ:', id);
      setJoinStatus('pending');
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram
      let telegramData;
      try {
        telegramData = getTelegramUserData();
      } catch (error) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', error);
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        setJoinStatus('failed');
        return false;
      }
      
      const response = await fetch('https://test.timecommunity.xyz/api/games/join', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          gameId: id,
          initData: telegramData.initData
        })
      });
      
      if (!response.ok) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', response.status, response.statusText);
        
        if (response.status === 403) {
          toast.error('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∏–≥—Ä–µ');
          setJoinStatus('failed');
          return false;
        }
        
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ');
        setJoinStatus('failed');
        return false;
      }
      
      const data = await response.json();
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', data);
      
      if (data.success) {
        toast.success('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ');
        setJoinStatus('joined');
        return true;
      } else {
        toast.error(data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ');
        setJoinStatus('failed');
        return false;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', error);
      toast.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      setJoinStatus('failed');
      return false;
    }
  };

  // –û—Å–Ω–æ–≤–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  useEffect(() => {
    if (!gameId) return;
    
    const loadGameAndJoin = async () => {
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
        const game = await fetchGameData(gameId);
        
        if (!game) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã');
          return;
        }
        
        setGameData(game);
        
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –æ–∂–∏–¥–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
        if (game.status === 'waiting') {
          try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Telegram
            let telegramData;
            try {
              telegramData = getTelegramUserData();
            } catch (telegramError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Telegram:', telegramError);
              // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∫–∞–∑–æ–º –∏–≥—Ä—ã
              // –Ω–æ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–π
              return;
            }
            
            const userTelegramId = telegramData.userId;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤
            const isPlayerInGame = game.players.some(
              (player: any) => player.telegramId === userTelegramId
            );
            
            if (!isPlayerInGame) {
              console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∏–≥—Ä–µ, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è...');
              await joinGame(gameId);
            } else {
              console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∏–≥—Ä–µ');
              setJoinStatus('joined');
            }
          } catch (joinError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ:', joinError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä—ã:', error);
        setError(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–≥—Ä—ã
    loadGameAndJoin();
  }, [gameId]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
  const handleGameEnd = (result: 'win' | 'lose' | 'draw') => {
    if (!gameData) return;
    
    console.log('–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:', result);
    
    try {
      if (result === 'win') {
        console.log('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞:', gameData.betAmount * 2);
        updateUserBalance(gameData.betAmount * 2);
        toast.success(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${gameData.betAmount * 2} —Ç–æ–∫–µ–Ω–æ–≤!`);
      } else if (result === 'draw') {
        console.log('–í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –Ω–∏—á—å–µ–π:', gameData.betAmount);
        updateUserBalance(gameData.betAmount);
        toast((`–ù–∏—á—å—è! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ ${gameData.betAmount} –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.`), {
          icon: 'üîÑ',
        });
      } else {
        toast((`–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!`), {
          icon: 'üò¢',
        });
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä
      setTimeout(() => {
        router.push('/games/dice');
      }, 3000);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã:', error);
    }
  };

  // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
  if (loading) {
    return (
      <SafeArea>
        <PageContainer>
          <div className="loading-screen">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</p>
          </div>
          <BottomNav />
        </PageContainer>
      </SafeArea>
    );
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
  if (error) {
    return (
      <SafeArea>
        <PageContainer>
          <div className="error-screen">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button onClick={() => router.push('/games/dice')} className="back-button">
              –í–µ—Ä–Ω—É—Ç—å—Å—è
            </button>
          </div>
          <BottomNav />
        </PageContainer>
      </SafeArea>
    );
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
  if (!gameData) {
    return (
      <SafeArea>
        <PageContainer>
          <div className="loading-screen">
            <p>–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
            <button onClick={() => router.push('/games/dice')} className="back-button">
              –í–µ—Ä–Ω—É—Ç—å—Å—è
            </button>
          </div>
          <BottomNav />
        </PageContainer>
      </SafeArea>
    );
  }

  // –†–µ–Ω–¥–µ—Ä –∏–≥—Ä—ã
  return (
    <SafeArea>
      <PageContainer>
        <PageHeader 
          title={gameData.status === 'waiting' ? "–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏" : "–ö—É–±–∏–∫"} 
        />
        
        <div className="game-page-wrapper">
          <ErrorBoundary>
            <MultiplayerDiceGame
              gameId={gameId}
              betAmount={gameData.betAmount}
              onGameEnd={handleGameEnd}
            />
          </ErrorBoundary>
        </div>
        
        <BottomNav />
      </PageContainer>
    </SafeArea>
  );
} 