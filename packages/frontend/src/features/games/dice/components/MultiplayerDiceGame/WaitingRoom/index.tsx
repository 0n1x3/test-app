'use client';

import React from 'react';
import { Icon } from '@iconify/react';
import { ConnectionStatusIndicator } from './ConnectionStatusIndicator';
import { BetInfo } from './BetInfo';
import './style.css';

// –¢–∏–ø—ã
type ConnectionStatus = 'connecting' | 'connected' | 'error';

interface Player {
  telegramId: string;
  username?: string;
  avatarUrl?: string;
}

interface WaitingRoomProps {
  gameId: string;
  betAmount: number;
  players: Player[];
  connectionStatus: ConnectionStatus;
  socketError: string | null;
  onCopyInviteLink: () => void;
  onReconnect: () => void;
}

export function WaitingRoom({
  gameId,
  betAmount,
  players,
  connectionStatus,
  socketError,
  onCopyInviteLink,
  onReconnect
}: WaitingRoomProps) {
  return (
    <div className="dice-game">
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <ConnectionStatusIndicator status={connectionStatus} />
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ */}
      <div className="game-header">
        <h2>–ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏</h2>
        <BetInfo amount={betAmount} />
      </div>
      
      {connectionStatus !== 'connected' ? (
        <div className="connecting-container">
          <div className="loading-spinner"></div>
          <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ...</p>
          {socketError && (
            <div className="error-container">
              <p>{socketError}</p>
              <button className="reload-button" onClick={onReconnect}>
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="waiting-container">
          <h2>–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞</h2>
          <p>–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–æ–º –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è</p>
          
          <div className="copy-link-button">
            <button onClick={onCopyInviteLink}>
              <Icon icon="mdi:content-copy" />
              <span>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</span>
            </button>
          </div>
          
          <div className="player-count">
            <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ ({players.length}/2):</p>
            {players.length === 0 ? (
              <p className="no-players">–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤...</p>
            ) : (
              <div className="players-list">
                {players.map((player, index) => (
                  <div key={index} className="player-item">
                    <div className="player-avatar">
                      {player.avatarUrl ? (
                        <img src={player.avatarUrl} alt={player.username || '–ò–≥—Ä–æ–∫'} />
                      ) : (
                        <span className="avatar-placeholder">üë§</span>
                      )}
                    </div>
                    <span className="player-name">{player.username || `–ò–≥—Ä–æ–∫ ${index + 1}`}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
} 